@model Eduria.Models.ExamModel
@{
    ViewData["Title"] = "Tonen examen ";
}

<section id="exam">
    <div id="noneToday">
        <div class="row large">
            <div class="medium-12 columns">
                <div id="answer">
                    <p id="AnswerNotification"></p>
                </div>
                <h2>Toets tijdvakken</h2>
                <p id="Question">Klik op start om te beginnen</p>
                <form>
                    <div class="cc-selector">
                        <input id="1" type="radio" name="timeperiod" onclick="eventListener(this)" value="prehistorie" />
                        <label class="timeperiod prehistorie" for="1"></label>
                        <input id="2" type="radio" name="timeperiod" onclick="eventListener(this)" value="oudheid" />
                        <label class="timeperiod oudheid" for="2"></label>
                        <input id="3" type="radio" name="timeperiod" onclick="eventListener(this)" value="vmiddeleeuwen" />
                        <label class="timeperiod vmiddeleeuwen" for="3"></label>
                        <input id="4" type="radio" name="timeperiod" onclick="eventListener(this)" value="lmiddeleeuwen" />
                        <label class="timeperiod lmiddeleeuwen" for="4"></label>
                        <input id="5" type="radio" name="timeperiod" onclick="eventListener(this)" value="nieuwetijd" />
                        <label class="timeperiod nieuwetijd" for="5"></label>
                        <input id="6" type="radio" name="timeperiod" onclick="eventListener(this)" value="goudeneeuw" />
                        <label class="timeperiod goudeneeuw" for="6"></label>
                        <input id="7" type="radio" name="timeperiod" onclick="eventListener(this)" value="verlichting" />
                        <label class="timeperiod verlichting" for="7"></label>
                        <input id="8" type="radio" name="timeperiod" onclick="eventListener(this)" value="industrie" />
                        <label class="timeperiod industrie" for="8"></label>
                        <input id="9" type="radio" name="timeperiod" onclick="eventListener(this)" value="oorlog" />
                        <label class="timeperiod oorlog" for="9"></label>
                        <input id="10" type="radio" name="timeperiod" onclick="eventListener(this)" value="tv" />
                        <label class="timeperiod tv" for="10"></label>
                    </div>
                    <div class="medium-offset-10 medium-4 columns">
                        <input id="SubmitPause" type="button" value="Pauzeer" onclick="Pause()" class="button" disabled="disabled"/>
                        <input id="ExamButton" type="button" value="Start" onclick="ExamLogic(QuestionModelArray, AnswerModelArray, count)" class="button green"/>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
<script language="javascript">
    var QuestionModelArray = [];
    var AnswerModelArray = [];
    var currentAnswersArray = [];
    var tempCurrentQuestion;
    var count = 0;
    var correct = 0;
    var score = @Model.Score;
    if (@Model.Score < 0) {
        score = 0;
    }

    var maxScore = @Model.MaxScore;
    if (@Model.MaxScore < 0) {
        maxScore = 0;
    }
    var pointsPerQuestion = 5;
    var outputJson = [];
    var ExamId = @Model.ExamId;
    var StartTime;
    var EndTime;
    var QuestionTime;
    var RepeatTime = 3;
    var ExamResultId = @Model.ExamResultId;
    var UserId = @ViewBag.userId;

    var selected = 0;
    console.log("Model score is: " + @Model.Score);
    console.log("Model maxscore is: " + @Model.MaxScore);

    // Function that creates an question object from the inputs
    function createTempQuestion(id, text, answerId) {
        if (@Model.MaxScore < 0) {
            maxScore = maxScore + pointsPerQuestion;
        }
        if (@Model.Score < 0) {
            score = score + pointsPerQuestion;
        }
        return { QuestionId: id, Text: text, AnswerId: answerId, TimesWrong: 0 };
    }

    // Function that creates an answer object from the inputs
    function createTempAnswer(id, questionId, text, correctAnswer) {
        return { AnswerId: id, QuestionId: questionId, Text: text, CorrectAnswer: correctAnswer };
    }

    // Function used to get the selected button with
    function eventListener(element) {
        selected = element.id;
    }

    @foreach (var d in Model.QuestionModels)
    {
        @:QuestionModelArray.push(createTempQuestion(@d.QuestionId, "@d.Text", @d.TimeTableModel.TimeTableId));
    }

    // This function is deprecated at the moment. It checks if the currently selected id is the same as the
    // correct answer in the tempanswerarray.
    function CheckAnswer(tempAnswerArray, clickedId) {
        var output = false;
        if (tempAnswerArray[clickedId - 1].CorrectAnswer === "True") {
            output = true;
            score++;
        }
        return output;
    }

    // Function that checks if the clickedid is the same as the answerid in the question object.
    function CheckAnswerT(question, clickedId) {
        clickedId = parseInt(clickedId);
        var output = false;
        if (parseInt(question.AnswerId) === clickedId) {
            output = true;
        } else {
            tempCurrentQuestion.TimesWrong++;
        }
        CreateJson(question, output);
        return output;
    }

    // Function is deprecated. This functions gets all answers from an answerarray that belong to the questionid
    function GetAnswersByQuestionId(answerArray, questionId) {
        var outputArray = [];
        answerArray.forEach(function (element) {
            if (element.QuestionId === questionId) {
                outputArray.push(element);
            }
        });
        return outputArray;
    }

    // All logic for the exams is put in here.
    function ExamLogic(questionArray, answerArray, id) {
        if (id === 0) {
            StartExam(questionArray.splice(0, 1)[0], answerArray);
            StartTime = new Date();
            $("#ExamButton").val("Volgende");
            $("#SubmitPause").attr("disabled", false);
        } else {
            
            $("#answer").fadeIn();
            if (CheckAnswerT(tempCurrentQuestion, selected)) {
                $("#answer").append("<p class='error correct'>Je hebt vraag" + tempCurrentQuestion.QuestionId + " goed beantwoord!</p>");
                correct = correct + 1;
                if (0 === questionArray.length) {
                    FinishedExam(correct);
                } else {
                    NextQuestion(questionArray.splice(0, 1)[0], answerArray, id);
                }
            } else {
                if (RepeatTime > tempCurrentQuestion.TimesWrong) {
                    questionArray.push(tempCurrentQuestion);
                }
                if (score > 0) {
                    score = score - 1;
                }
                if (0 === questionArray.length) {
                    FinishedExam(score);
                } else {
                    NextQuestion(questionArray.splice(0, 1)[0], answerArray, id);
                }
                $("#answer").append("<p class='error wrong'>Helaas, deze vraag heb je verkeerd beantwoord!</p>");
            }
            setTimeout(hideMessage, 1000);
            DeSelectRadioButton(selected);
        }
        count++;
        console.log(score);
    }


    // Function that hides the status message with a fade.
    function hideMessage() {
        $("#answer").fadeOut(1000);
        setTimeout(emptyAnswer, 1000);
    }

    // Function that empties the data in the answer id.
    function emptyAnswer() {
        $("#answer").empty();
    }

    // Function that starts the exam
    function StartExam(question, answerArray) {
        SetupQuestion(question, answerArray, 0);
    }

    // Function that loads the next question.
    function NextQuestion(question, answerArray, id) {
        SetupQuestion(question, answerArray, id);
    }

    // Function that sets the new question up for answering.
    function SetupQuestion(question, answerArray, id) {
        tempCurrentQuestion = question;
        document.getElementById("Question").innerHTML = question.Text;
    }

    // Function that contains all logic for when the exam is finished.
    function FinishedExam(numCorrect) {
        DeSelectRadioButton(selected);
        document.getElementById("Question").innerHTML = "Dat was het examen! Je had " + numCorrect + " vragen goed! Dat zorgt voor een score van: " + maxScore;
        EndTime = new Date();
        SendJson(false);
        $("#ExamButton").attr("disabled", true);
    }

    // Function is deprecated.
    function SetupExam() {
        QuestionModelArray.reverse();
    }

    // Function that deselects the radiobutton when an answer is submitted.
    function DeSelectRadioButton(buttonId) {
        document.getElementById(buttonId).checked = false;
    }

    // Function that creates a json array for the json array.
    function CreateJson(question, correct) {
        var date = new Date();
        QuestionTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
        var jsonObject = { Questions : { "QuestionId":question.QuestionId, "TimesWrong":question.TimesWrong, "CorrectAnswered":correct, "AnsweredOn": QuestionTime.toJSON()}}
        outputJson.push(jsonObject);
    }

    // Function that sends the Json Array to the controller.
    function SendJson(isPaused) {
        if (ExamResultId < 0) {
            StartTime = StartTime.toJSON();
        } else {
            StartTime = null;
        }
        if (isPaused) {
            EndTime = null;
        } else {
            var onePercent = 100.0 / maxScore;
            score = onePercent * score;
            EndTime = EndTime.toJSON();
        }
        console.log(maxScore);
        $.ajax({
            type: "POST",
            url: "/Exam/SendResults",
            data: { jsoninput : JSON.stringify(outputJson), examId : JSON.stringify(ExamId), userId : JSON.stringify(UserId), score : JSON.stringify(score), maxscore : JSON.stringify(maxScore), starttime : JSON.stringify(StartTime), endtime: JSON.stringify(EndTime), examResultId: JSON.stringify(ExamResultId) },
            success: function() {
                window.location.href = "/Student/TestResults/";
            },
            dataType: "text",
            traditional: true
        });
        }

    function Pause() {
        SendJson(true);
    }

</script>