@{
    ViewData["Title"] = "Create";
}
@{
    if (ViewBag.success == 1)
    {
        <p style="color:green;">Nieuwe toets is aangemaakt!</p>
    }
}

<h2>Create</h2>
<div class="questionDiv">
    <input type="text" id="examName" name="examName" placeholder="Toets naam" />
    <input type="text" id="examDescription" name="examDescription" placeholder="Omschrijving" />
    <select id="examCategory" name="examCategory">
        @{
            foreach (var desc in ViewBag.categories)
            {
                <option value="@desc.CategoryId">@desc.CategoryName</option>
            }
        }
    </select>
    <div id="questionBox">

    </div>
    <div id="record"></div>
    <input type="button" onclick="AddQuestion()" value="Add Question">

</div>
<div class="form-group">
    <input type="button" onclick="SaveExam()" value="Aanmaken" class="button" />
</div>

<script>
    var questions = [];
    var questionBox;
    var questionCount;
    window.onload = function () {
        questionBox = $("#questionBox");
    }

    function SaveExam() { 
        SaveQuestions();
        var name = $("#examName").val();
        var description = $("#examDescription").val();
        var category = $("#examCategory").val();
        var exam = new Exam(name, category, description, questions);
        $.ajax({
            type: "POST",
            url: "/Exam/createExam",
            data: { examJson: JSON.stringify(exam) },
            success: function () {
                //window.location.href = '/Exam/Show';
            }
        });
    }

    function SaveQuestions() {
        for (var i = 0; i < questions.length; i++) {
            SaveQuestion(i);
            var div = "#UploadForm" + questions[i].id + "";
            var formData = new FormData($(div));

            $.ajax({
                type: 'POST',
                url: "/Exam/uploadData",
                data: { data: formData },
                cache:false,
                contentType: false,
                processData: false,
                success:function(data){
                    console.log("success");
                    console.log(data);
                },
                error: function(data){
                    console.log("error");
                    console.log(data);
                }
            });
        }
    }

    function AddQuestion() {
        if (questions.length == 0) {
            questionCount = 0;
        }
        questions.push(new Question(questionCount));
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].id == questionCount) {
                DrawQuestion(questionCount, questions.length);
            }
        }
        questionCount++;
    }

    function AddAnswer(qId) {
        var index;
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].id == qId) {
                index = i;
            }
        }

        questions[index].CreateAnswer();
        for (var j = 0; j < questions[index].answers.length; j++) {
            if (questions[index].answers[j].id == (questions[index].answerCount - 1)) {
                DrawAnswer(questions[index].answers[j].id, qId);
            }
        }
    }

    function RemoveQuestion(count) {
        var div = "#question" + count + "";
        var button = "#show" + count + "";
        var questionDiv = $(div);
        var questionButton = $(button);
        questionDiv.remove();
        questionButton.remove();
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].id == count) {
                questions.splice(i, 1);
                break;
            }
        }
    }
    function RemoveAnswer(questionId, answerId) {
        var div = "#answer" + questionId + "-" + answerId + "";
        var answerDiv = $(div);
        answerDiv.remove();
        var arr = questions[questionId].answers;
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].id == answerId) {
                arr.splice(i, 1);
                break;
            }
        }
    }
    function DrawQuestion(count, listIndex) {
        var questionText = "Question";
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].id == count) {
                questionText = questions[i].text;
            }
        }
        var string = "<p><input type='button' id='show" + count + "' onClick='Show(" + count + ")' value='" + questionText + "'/></p>";
        string += "<div id='question" + count + "'>";
        string += "<input type='number' class='questionId' name='questionId' value= '" + count + "'/>";
        string += "<p><input type='text' id='text" + count + "' name='questionText' placeholder='Question " + listIndex + "'/>";
        string += "<input type='button' onClick = 'RemoveQuestion(" + count + ")' value='Verwijder'/></p>";
        string += "<p><select id='category" + count + "'></select>";
        string += "<p><input type='text' id='category" + count + "' name='questionCategory' placeholder='category'/></p>";
        string += "<p><select id='mediatype" + count + "' name='questionMediaType' selected='0' oninput='OnChangeMediaType(" + count + ")'>";
        string += "<option value = '0'>None</option>";
        string += "<option value = '1'>Audio</option>";
        string += "<option value = '2'>Image</option>";
        string += "<option value = '3'>Video</option>";
        string += "</select></p>"; 

        string += "<form id='UploadForm" + count + "' enctype='multipart/form-data' method='post'>";
        string += "<p><input type='text' id='medialink" + count + "' name='questionMedialink' placeholder='medialink'/></p>";
    
        string += "<div id='audiodiv" + count + "'>";
        string += "<p><input type='button' class='audiobuttons" + count + "' onclick='startRecording()' value='start recording audio'>";
        string += "<input type='button' class='audiobuttons" + count + "' onclick ='stopRecording(" + count + ")' value ='stop recording audio'></p>";
        string += "<input type='file' id='audiofile" + count + "' accept='audio/*' oninput='SetAudioLink(" + count + ")'>";
        string += "<div id='audio" + count + "'></div>";
        string += "</div>";

        string += "<div id='imagediv" + count + "'>";
        string += "<input type='file' id='imagefile" + count + "'accept='image/*' oninput='SetImageLink(" + count + ")'>";
        string += "</div>";
        string += "</form>";
        string += "<div id='answers" + count + "'></div>";
        string += "<p><input type='button' onclick='AddAnswer(" + count + ")' value='Add Answer'/></p>";
        string += "</div>"
        questionBox.append(string);
        Show(count);

    }
    function SetAudiolink(index) {
        var input = "#audiofile" + index + "";
        var target = "#medialink" + index + "";
        var val = $(input).val().split('\\');
        $(target).val(val[val.length-1]);
    }
    function SetImageLink(index) {
        var input = "#imagefile" + index + "";
        var target = "#medialink" + index + "";
        var val = $(input).val().split('\\');
        $(target).val(val[val.length-1]);
    }

    function DrawAnswer(id, questionId) {
        var div = "#answers" + questionId + "";
        var answersbox = $(div);
        var string = "<div id='answer" + questionId + "-" + id + "'>";
        string += "<p><input type='text' id='answertext" + questionId + "-" + id + "' name='answerText' placeholder='answer " + id + "'/>";
        string += "<p><select id='answerCorrect" + id + "' name='answerCorrect' selected='0'>";
        string += "<option value = '0'>Niet correct</option>";
        string += "<option value = '1'>Correct</option>";
        string += "</select></p>";
        string += "<input type='number' class='answerQuestionId' name='answerQuestionId' value='" + questionId + "'/>";
        string += "<input type='button' onClick = 'RemoveAnswer(" + questionId + ", " + id + ")' value='Verwijder'/></button></p>";
        string += "</div>";
        answersbox.append(string);
        $(".answerQuestionId").hide();
    }

    function Show(index) {
        for (var i = 0; i < questions.length; i++) {
            SaveQuestion(i);
            var div = "#question" + questions[i].id + "";
            if (questions[i].id == index) {
                $(div).show();
                OnChangeMediaType(index);
            } else {
                $(div).hide();
            }
        }
        $(".questionId").hide();        
    }

    function OnChangeMediaType(count) {
        var type = "#mediatype" + count + "";
        var link = "#medialink" + count + "";
        var audiodiv = "#audiodiv" + count + "";
        var imagediv = "#imagediv" + count + "";
        var audioinput = "#audiofile" + count + "";
        var imageinput = "#imagefile" + count + "";
        $(audioinput).val("");
        $(imageinput).val("");
        $(link).hide();
        $(imagediv).hide();
        $(audiodiv).hide();
        switch ($(type).val()) {
            case "1":
                $(audiodiv).show();
                break;
            case "2":
                $(imagediv).show();
                break;              
            case "3":
                $(link).val("");
                $(link).show();
                break;
        }
    }

    function SaveQuestion(index) {
        var div = "#show" + index + "";
        var input = "#text" + index + "";
        var cat = "#category" + index + "";
        var mType = "#mediatype" + index + "";
        var mLink = "#medialink" + index + "";
        var inputText = $(input).val();
        var inputCat = $(cat).val();
        var inputType = $(mType).val();
        var inputLink = $(mLink).val();
        $(div).empty();
        if (inputCat != "") {
            questions[index].category = inputCat;
        }
        if (inputType != "") {
            questions[index].mediaType = inputType;
        }
        if (inputLink != "") {
            questions[index].mediaLink = inputLink;
        }
        if (inputText != "") {
            questions[index].text = inputText;
            $(div).val(questions[index].text);
        }
        else {
            $(div).append("Question");
        }
        questions[index].SaveAnswers();
    }
    function SaveAnswer(questionId, answerId) {
        var input = "#answertext" + questionId + "-" + answerId + "";
        var correct = "#answerCorrect" + answerId + "";
        var inputAnswerText = $(input).val();
        var inputAnswerCorrect = $(correct).val();
        var index = GetQuestionIndex(questionId);
        if (inputAnswerText != "") {
            questions[index].answers[answerId].text = inputAnswerText;
        }
        questions[index].answers[answerId].correct = inputAnswerCorrect;
    }

    function GetQuestionIndex(id) {
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].id == id) {
                return i;
            }
        }
    }

    function Question(id) {
        this.id = id;
        this.answerCount = 0;
        this.text = "Question";
        this.category = 0;
        this.mediaType = 0;
        this.mediaLink = "";
        this.answers = [];

        this.CreateAnswer = function () {
            if (this.answers.length == 0) {
                this.answerCount = 0;
            }
            this.answers.push(new Answer(this.answerCount, id));
            this.answerCount++;
        }

        this.SaveAnswers = function () {
            for (var i = 0; i < this.answers.length; i++) {
                SaveAnswer(this.id, this.answers[i].id);
            }
        }
    }

    function Answer(id, questionId) {
        this.id = id;
        this.questionId = questionId;
        this.text = "";
        this.correct = 0;
    }

    function Exam(name, category, description, questions) {
        this.name = name;
        this.category = category;
        this.description = description;
        this.questions = questions;
    }

    //function to start recording  
    function startRecording() {
        if (recorder.state == 'inactive') {
            chunks = [];
            recorder.start(500);
        }
    }
    //function to stop recording
    function stopRecording(q) {
        if (recorder.state == 'recording') {
            recorder.stop();
            const blob = new Blob(chunks, { type: 'audio/webm' });
            // convert blob to URL so it can be assigned to a audio src attribute
            createAudioElement(URL.createObjectURL(blob), q);
        }
    }

    // appends an audio element to playback and download recording
    function createAudioElement(blobUrl, currentQuestion) {
        var div = "#audio" + currentQuestion + "";
        var audiobuttons = ".audiobuttons" + currentQuestion + "";
        $(div).empty();
        const downloadEl = document.createElement('a');
        downloadEl.style = 'display: block';
        downloadEl.innerHTML = 'download';
        downloadEl.download = 'audio.webm';
        downloadEl.href = blobUrl;
        const audioEl = document.createElement('audio');
        audioEl.controls = true;
        const sourceEl = document.createElement('source');
        sourceEl.src = blobUrl;
        sourceEl.type = 'audio/webm';
        const remove = "<button onclick='removeAudioElement(" + currentQuestion + ")'>Verwijder</button>"
        audioEl.appendChild(sourceEl);
        $(div).append(audioEl);
        $(div).append(remove);
        $(div).append(downloadEl);
        $(audiobuttons).hide();
    }

    function removeAudioElement(q) {
        var div = "#audio" + q + "";
        var audiobuttons = ".audiobuttons" + q + "";
        $(div).empty();
        $(audiobuttons).show();
    }

    var recorder;
    // store streaming data chunks in array
    var chunks = [];
    // request permission to access audio stream
    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
        // create media recorder instance to initialize recording
        recorder = new MediaRecorder(stream);
        // function to be called when data is received
        recorder.ondataavailable = e => {
          // add stream data to chunks
          chunks.push(e.data);
        };
    }).catch(console.error);
</script>
