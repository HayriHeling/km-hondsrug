@using System.Globalization
@model Eduria.Models.TimelineModel
@{
    ViewData["Title"] = "Tijdlijn bekijken";
}
<style>
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 5; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        text-align:left;
    }

    /* The Close Button */
    .close {
            color: #fff;
            background-color: #29abe2;
            padding: 10px;
            text-align: center;
            width: 50px;
            float: right;
            position:absolute;
            top: -20px;
            right: -20px;
            font-size: 28px;
            font-weight: bold;
            }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        @@-webkit-keyframes Appear {
            from {
                opacity: 0;
                width: 1%;
            }

            to {
                opacity: 1;
                width: 80%;
            }
        }

        @@keyframes Appear {
            from {
                opacity: 0;
                width: 1%;
            }

            to {
                opacity: 1;
                width: 80%;
            }
        }
</style>

<div class="timeline">
    <div class="row">
        @if (ViewBag.id > -1)
        {
            <h2>
                Tijdlijn van @ViewBag.user.Firstname @ViewBag.user.Lastname.
            </h2>
        }
        @if (ViewBag.user.UserId == ViewBag.loggedUser || (ViewBag.user.UserType == (int)UserRoles.Admin && ViewBag.loggedUserType == (int)UserRoles.Docent))
        {
            <div>
                <input type="button" value="&plus; Gebeurtenis " onclick="location.href='@Url.Action("CreateInformation", "Timeline", new { state = ViewBag.id })'" class="button" />
            </div>
        }
    </div>
    @{
        int count = 0;
    }
    @foreach (TimeblockModel timeBlockModel in Model.TimeblockModels)
    {
        string modelName = timeBlockModel.TimeTableModel.Text;
        modelName = char.ToUpper(modelName[0]) + modelName.Substring(1);
        string name = "period" + modelName;
        <section id=@name>
            <div class="row">
                <h1>@modelName</h1>
            </div>
            <ul>
                @foreach (TimeBlockInformationModel timeBlockInformationModel in timeBlockModel.TimeBlockInformationModels)
                {
                    <li>
                        <div class="right_content">
                            <h2 id="myBtn@(count)" onclick="OpenModal(@count)">@timeBlockInformationModel.Name</h2>

                            <!-- The Modal -->
                            <div id="myModal@(count)" class="modal">
                                @{count++;}
                                <!-- Modal content -->
                                <div class="modal-content" style="position:relative;">
                                    @if (ViewBag.user.UserId == ViewBag.loggedUser || (ViewBag.user.UserType == (int)UserRoles.Admin && ViewBag.loggedUserType == (int)UserRoles.Docent))
                                    {
                                        <input type="button" value="&#9998;" onclick="location.href='@Url.Action("EditInformation", "Timeline", new { id = timeBlockInformationModel.TimeBlockInformationId })'" class="button blue" />
                                        <input type="button" value="Media" onclick="location.href='@Url.Action("Upload", "Timeline", new { id = timeBlockInformationModel.TimeBlockInformationId })'" class="button blue" />
                                        <input type="button" value="&#10006;" onclick="location.href='@Url.Action("DeleteInformation", "Timeline", new { id = timeBlockInformationModel.TimeBlockInformationId })'" class="button red" />
                                    }
                                    <span class="close" onclick="CloseModal()">&times;</span>
                                    <p>@timeBlockInformationModel.Description</p>
                                    <div style="height:auto; width: 100%; left:0; bottom:0; padding: 15px 15px;">
    
                                            @{
                                                int audioCount = 0;
                                                int mediaCount = 0;
                                            }
                                            @foreach (MediaSourceModel source in timeBlockInformationModel.MediaSourceModels)
                                            {
                                                if (mediaCount == 0)
                                                {
                                                    mediaCount++;
                                                    <h2>Media</h2>
                                                }
                                                if (source.MediaType == MediaType.Image)
                                                {
                                                    <div style="height: 180px; float: left; margin: 0 5px;">
                                                        <a href="@Url.Content(String.Format("~/Content/{0}", source.Source))" target="_blank"><img src="@Url.Content(String.Format("~/Content/{0}", source.Source))" style="height: 180px;" /></a>
                                                    </div>
                                                }
                                                if (source.MediaType == MediaType.Video)
                                                {
                                                    string[] parsedSource = source.Source.Split("?v=");
                                                    string embed = parsedSource[(parsedSource.Length - 1)];
                                                    <div style="height: 180px; float: left; margin: 0 5px;">
                                                        <iframe width="280" height="180"
                                                                src="@Url.Content(String.Format("https://www.youtube.com/embed/{0}", embed))" allowFullScreen="true"></iframe>
                                                    </div>
                                                }
                                            }
                                        <div>
                                            @foreach (MediaSourceModel source in timeBlockInformationModel.MediaSourceModels)
                                            {
                                                if (source.MediaType == MediaType.Audio)
                                                {
                                                    if (audioCount == 0)
                                                    {
                                                        audioCount++;
                                                        <h2>Audio</h2>
                                                    }
                                                    <audio controls>
                                                        <source src="@Url.Content(String.Format("~/Content/{0}", source.Source))" type="audio/mp3">
                                                        Your browser does not support the audio element.
                                                    </audio>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="left_content">
                            @if (timeBlockInformationModel.BeforeChrist == ChristNotation.vChr)
                            {
                                NumberFormatInfo nfi = new NumberFormatInfo
                                {
                                    CurrencyDecimalSeparator = ",",
                                    CurrencyGroupSeparator = ".",
                                    CurrencySymbol = ""
                                };
                                string year = Convert.ToDecimal(timeBlockInformationModel.Year).ToString("C2", nfi);
                                year = year.Substring(0, (year.Length - 3));

                                <h3>@year v.C.</h3>
                            }
                            else
                            {
                                <h3>@timeBlockInformationModel.Year</h3>
                            }
                        </div>
                    </li>
                }
            </ul>
        </section>
    }
</div>
<script>
    function responsiveToggle() {
    var x = document.getElementById("myTopnav");
    if (x.className === "topnav") {
        x.className += " responsive";
    } else {
        x.className = "topnav";
    }
}


/* Load slider and show/hide it */
window.addEventListener('load', function () {
    document.querySelector('.glider').addEventListener('glider-slide-visible', function (event) {
        var glider = Glider(this);
        console.log('Slide Visible %s', event.detail.slide)
    });
    document.querySelector('.glider').addEventListener('glider-slide-hidden', function (event) {
        console.log('Slide Hidden %s', event.detail.slide)
    });
    document.querySelector('.glider').addEventListener('glider-refresh', function (event) {
        console.log('Refresh')
    });
    document.querySelector('.glider').addEventListener('glider-loaded', function (event) {
        console.log('Loaded')
    });

   /* Default settings slider */
    window._ = new Glider(document.querySelector('.glider'), {
        slidesToShow: 1, //'auto',
        slidesToScroll: 2,
        itemWidth: 400,
        dragVelocity: 0.7,
        draggable: true,
        scrollLock: true,
        dots: '#dots',
        rewind: true,
        arrows: {
            prev: '.glider-prev',
            next: '.glider-next'
        },

        /* Responsive for different devices */
        responsive: [
            {
                breakpoint: 800,
                settings: {
                    slidesToScroll: 2,
                    itemWidth: 400,
                    slidesToShow: 'auto',
                    exactWidth: true
                }
            },
            {
                breakpoint: 700,
                settings: {
                    slidesToScroll: 2,
                    slidesToShow: 1,
                    dots: false,
                    arrows: false,
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToScroll: 1,
                    slidesToShow: 1
                }
            },
            {
                breakpoint: 500,
                settings: {
                    slidesToScroll: 1,
                    slidesToShow: 1,
                    dots: false,
                    arrows: false,
                    scrollLock: true
                }
            }
        ]
    });
});

    var currentModal = "";
    function OpenModal(id) {
        var modalId = "#myModal" + id + "";
        $(modalId).show();
        currentModal = modalId;
    }
// When the user clicks on <span> (x), close the modal
    function CloseModal() {
    $(currentModal).hide();
}
</script>